/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-light-gray: #777;
$color-white: #fff;
$color-black: #000;

*,
*::after,
*::before {
    box-sizing: inherit; /*inherited from body element (belove) */
}

html {
    font-size: 62.5%; /* 10px because it's easier to calculate rem */
    /* % is for better 10/16 (default font-size is 16px and we want to set it to 10px) */
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: $color-light-gray;
    padding: 3rem;
    box-sizing: border-box;
}

.header {
    position: relative;
    height: 95vh;
    background-image: linear-gradient(to right,
    rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
     url(../img/hero.jpg);
    background-size: cover; /* fit element inside box */
    background-position: top; /* top of the image stays at top of element during resizing also can be center and bottom */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

    &__logo-box {
        position: absolute;
        top: 4rem;
        left: 4rem;
    }

    &__logo {
        height: 3.5rem;
    }
    
    &__text-box {
       position: absolute;
       top: 40%;
       left: 50%;
       transform: translate(-50%, -50%);
       text-align: center;
    }
}

.heading-primary {
    color: $color-white;
    text-transform: uppercase;
    backface-visibility: hidden; /*to fix shaking animation (used if neccesary) */
    margin-bottom: 6rem;

    &--main {
        display: block;  /*block elements occupy 100% available width and has <br> at the end */
        font-size: 6rem;
        font-weight: 400;
        letter-spacing: 3rem;
        margin-right: -3rem;
        animation-name: moveInLeft;
        animation-duration: 1s;
        animation-timing-function: ease-out;
        text-align: center;
        
        /* animation: moveInLeft 1s ease-out; */
        /* animation-delay: 3s; */
        /* animation-iteration-count: 3; */
    
    }
    
    &--sub {
        /* display: block; block elements occupy 100% available width and has <br> at the end */
        display: block;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.6rem;
        margin-right: -1.6rem;
        animation: moveInRight 1s ease-out;
    }
}



/* for performance it's best idea to animate two properties */
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

.btn {
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        display: inline-block;
        border-radius: 10rem;
        transition: all .2s; /* all positions are enable to animate */
        position: relative; /*because we want to position .btn::after in relate to this element */
        font-size: 1.6rem;
    }

    &:hover {
        transform: translateY(-3px);
        box-shadow: 0 1rem 2rem rgba($color-black,.2); 
    }

    &:active {
        transform: translateY(-1px);
        box-shadow: 0 .5rem 1rem rgba($color-black,.2); 
    }
    
/* ::after elemtn is behind original element */
    &::after {
        content: "";
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        position:absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all .4s;
    }

/* we want to see after element only when hover on original element */
    &:hover::after {
        transform: scaleX(1.4) scaleY(1.6);
        opacity: 0;
    }
    
}

.btn--white {
    background-color: $color-white;
    color: $color-light-gray;

    &::after {
        background-color: $color-white;
    }
}

.btn--animated {
animation: moveInBottom .5s ease-out .75s; /*last property is delay of start */
animation-fill-mode: backwards; /* set initial state of animation*/
}